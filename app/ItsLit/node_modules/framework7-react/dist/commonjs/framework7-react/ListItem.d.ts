/// <reference types="react" />
import * as React from 'react';
export interface IListItemProps {
    title?: string | number;
    text?: string | number;
    media?: string;
    subtitle?: string | number;
    link?: boolean | string;
    linkExternal?: boolean;
    linkBack?: boolean;
    linkNoFastclick?: boolean;
    linkForce?: boolean;
    linkReload?: boolean;
    linkAnimatePages?: boolean;
    linkIgnoreCache?: boolean;
    linkPageName?: string;
    linkTemplate?: string;
    linkTarget?: string;
    linkView?: string;
    linkOpenPanel?: boolean | string;
    linkClosePanel?: boolean | string;
    linkOpenPopup?: boolean | string;
    linkClosePopup?: boolean | string;
    linkOpenPopover?: boolean | string;
    linkClosePopover?: boolean | string;
    linkOpenLoginScreen?: boolean | string;
    linkCloseLoginScreen?: boolean | string;
    linkOpenPicker?: boolean | string;
    linkClosePicker?: boolean | string;
    after?: string | number;
    badge?: string | number;
    badgeColor?: string;
    mediaItem?: boolean;
    mediaListItem?: boolean;
    mediaList?: boolean;
    divider?: boolean;
    groupTitle?: boolean;
    swipeout?: boolean;
    sortable?: boolean;
    accordionItem?: boolean;
    accordionExpanded?: boolean;
    smartSelect?: boolean;
    smartSelectSearchbar?: boolean;
    smartSelectSearchbarPlaceholder?: string;
    smartSelectSearchbarCancel?: string;
    smartSelectPageTitle?: string;
    smartSelectBackText?: string;
    smartSelectBackOnSelect?: boolean;
    smartSelectVirtualList?: boolean;
    smartSelectVirtualListHeight?: number;
    smartSelectOpenIn?: string;
    smartSelectNavbarTheme?: string;
    smartSelectFormTheme?: string;
    checkbox?: boolean;
    checked?: boolean;
    radio?: boolean;
    name?: string;
    value?: string | number | boolean | any[];
    inputValue?: string | number;
    readonly?: boolean;
    required?: boolean;
    disabled?: boolean;
    onClick?: (eventArgs?: any) => void;
    onSwipeoutDeleted?: (eventArgs?: any) => void;
    onSwipeoutDelete?: (eventArgs?: any) => void;
    onSwipeoutClose?: (eventArgs?: any) => void;
    onSwipeoutClosed?: (eventArgs?: any) => void;
    onSwipeoutOpen?: (eventArgs?: any) => void;
    onSwipeoutOpened?: (eventArgs?: any) => void;
    onSwipeout?: (eventArgs?: any) => void;
    onAccordionClose?: (eventArgs?: any) => void;
    onAccordionClosed?: (eventArgs?: any) => void;
    onAccordionOpen?: (eventArgs?: any) => void;
    onAccordionOpened?: (eventArgs?: any) => void;
    onInput?: (eventArgs?: any) => void;
    onChange?: (eventArgs?: any) => void;
    contentStartSlot?: React.ReactElement<any>;
    mediaStartSlot?: React.ReactElement<any>;
    innerStartSlot?: React.ReactElement<any>;
    afterStartSlot?: React.ReactElement<any>;
    rootStartSlot?: React.ReactElement<any>;
    contentSlot?: React.ReactElement<any>;
    mediaSlot?: React.ReactElement<any>;
    innerSlot?: React.ReactElement<any>;
    afterSlot?: React.ReactElement<any>;
    rootSlot?: React.ReactElement<any>;
    id?: string;
    className?: string;
    style?: {
        [cssAttribute: string]: string;
    };
}
export declare const ListItem: React.ComponentClass<IListItemProps>;
